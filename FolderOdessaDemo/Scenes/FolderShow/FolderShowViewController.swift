//
//  FolderShowViewController.swift
//  FolderOdessaDemo
//
//  Created by msm72 on 04.10.2017.
//  Copyright (c) 2017 RemoteJob. All rights reserved.
//
//  This file was generated by the Clean Swift Xcode Templates so
//  you can apply clean architecture to your iOS and Mac projects,
//  see http://clean-swift.com
//

import Cocoa

// MARK: - Input & Output protocols
protocol FolderShowDisplayLogic: class {
    func displayLoadFolderContext(fromViewModel viewModel: FolderShowModels.Folder.ViewModel)
}

let pageRows: UInt = 10

class FolderShowViewController: NSViewController {
    // MARK: - Properties
    var interactor: FolderShowBusinessLogic?
    var router: (NSObjectProtocol & FolderShowRoutingLogic & FolderShowDataPassing)?
    
    var displayedFiles: [FolderShowModels.Folder.ViewModel.DisplayedFolder] = []
    
    // Pagination
    var currentPage: UInt = 0
    var pageUpdated = Set<UInt>()
    
    
    // MARK: - IBOutlets
    @IBOutlet weak var tableView: NSTableView! {
        didSet {
            tableView.delegate = self
            tableView.dataSource = self
            tableView.sizeToFit()
        }
    }
    
    @IBOutlet weak var scrollView: NSScrollView! {
        didSet {
            NotificationCenter.default.addObserver(
                self,
                selector: #selector(scrollViewDidScroll(_:)),
                name: NSView.boundsDidChangeNotification,
                object: tableView
            )
        }
    }
    
    
    // MARK: - Object lifecycle
    override init(nibName nibNameOrNil: NSNib.Name?, bundle nibBundleOrNil: Bundle?) {
        super.init(nibName: nibNameOrNil, bundle: nibBundleOrNil)
        
        setup()
    }
    
    required init?(coder aDecoder: NSCoder) {
        super.init(coder: aDecoder)

        setup()
    }
    
    
    // MARK: - Setup
    private func setup() {
        let viewController          =   self
        let interactor              =   FolderShowInteractor()
        let presenter               =   FolderShowPresenter()
        let router                  =   FolderShowRouter()
        
        viewController.interactor   =   interactor
        viewController.router       =   router
        interactor.presenter        =   presenter
        presenter.viewController    =   viewController
        router.viewController       =   viewController
        router.dataStore            =   interactor
    }
    
    
    // MARK: - Routing
    override func prepare(for segue: NSStoryboardSegue, sender: Any?) {
        if let scene = segue.identifier {
            let selector = NSSelectorFromString("routeTo\(scene)WithSegue:")
            
            if let router = router, router.responds(to: selector) {
                router.perform(selector, with: segue)
            }
        }
    }
    
    
    // MARK: - View lifecycle
    override func viewDidLoad() {
        super.viewDidLoad()
        
        // Show modal NSOpenPanel
        if let path = OpenPanelManager().open() {
            if FolderManager.instance.fileProvider == nil {
                FolderManager.instance.fileProviderCreate(withURL: path)
            }
            
            // Read selected folder context
            contextLoad(forPage: currentPage)
            
            // Create folder observer
            FolderManager.instance.fileProvider.registerNotifcation(path: "/", eventHandler: {
                self.currentPage = 0
                self.pageUpdated.removeAll()
                self.contextLoad(forPage: self.currentPage)
            })
        }
        
        scrollView.documentView = self.tableView

//        NotificationCenter.default.addObserver(self,
//                                               selector: #selector(tableViewRebuildColumnsWidth(_:)),
//                                               name: NSView.frameDidChangeNotification,
//                                               object: nil)
    }
    
    
    // MARK: - Custom Functions
    func contextLoad(forPage page: UInt) {
        let requestModel = FolderShowModels.Folder.RequestModel(pageNumber: currentPage)
        self.interactor?.loadFolderContext(withRequestModel: requestModel)
    }
    
    @objc func scrollViewDidScroll(_ notification: NSNotification) {
        let range = tableView.rows(in: tableView.visibleRect)
        let index = range.location + range.length - 1
        print(index)
        
        guard index > 0 else {
            return
        }
        
        if !pageUpdated.contains(UInt(index)) && index == displayedFiles.count - 1 {
            contextLoad(forPage: currentPage)
        }
    }
    
    @objc func tableViewRebuildColumnsWidth(_ notification: Notification) {
        let spacingWidth = tableView.intercellSpacing.width
        let tableWidth = tableView.frame.width
        let sizeColumnWidth: CGFloat = (120 - spacingWidth) / 480 * tableWidth
        let dateColumnWidth: CGFloat = (110 - spacingWidth) / 480 * tableWidth
        let nameColumnWidth = tableWidth - dateColumnWidth - sizeColumnWidth

        tableView.tableColumns[0].width = nameColumnWidth
        tableView.tableColumns[1].width = dateColumnWidth
        tableView.tableColumns[2].width = sizeColumnWidth
    }
}


// MARK: - NSTableViewDataSource
extension FolderShowViewController: NSTableViewDataSource {
    fileprivate enum CellIdentifiers {
        static let NameCell = "NameCell"
        static let DateCell = "DateCell"
        static let SizeCell = "SizeCell"
    }
    
    func numberOfRows(in tableView: NSTableView) -> Int {
        return displayedFiles.count
    }
    
    func tableView(_ tableView: NSTableView, sizeToFitWidthOfColumn column: Int) -> CGFloat {
        return 120
    }
    

}


// MARK: - NSTableViewDelegate
extension FolderShowViewController: NSTableViewDelegate {
    func tableView(_ tableView: NSTableView, viewFor tableColumn: NSTableColumn?, row: Int) -> NSView? {
        var text: String = ""
        var cellIdentifier: String = ""
        
        let file = displayedFiles[row]

        switch tableColumn {
        // Name + icon
        case tableView.tableColumns[0]?:
            text = "\(row). " + file.name
            cellIdentifier = CellIdentifiers.NameCell

        // Modify date
        case tableView.tableColumns[1]?:
            text = file.modifyDate
            cellIdentifier = CellIdentifiers.DateCell

        // Size
        case tableView.tableColumns[2]?:
            text = file.size
            cellIdentifier = CellIdentifiers.SizeCell

        default:
            break
        }
        
        // Cell config
        if let cell = tableView.makeView(withIdentifier: NSUserInterfaceItemIdentifier(rawValue: cellIdentifier), owner: nil) as? NSTableCellView {
            cell.textField?.stringValue = text
            
            if tableColumn == tableView.tableColumns[0] {
                cell.imageView?.image = file.isFolder ? NSImage(named: NSImage.Name(rawValue: "icon-folder")) : NSWorkspace.shared.icon(forFileType: file.ext)
            }
            
            print(row)
            return cell
        }
     
        return nil
    }
    
    func tableView(_ tableView: NSTableView, heightOfRow row: Int) -> CGFloat {
        return 50
    }
}


// MARK: - FolderShowDisplayLogic
extension FolderShowViewController: FolderShowDisplayLogic {
    func displayLoadFolderContext(fromViewModel viewModel: FolderShowModels.Folder.ViewModel) {
        if currentPage == 0 {
            displayedFiles = viewModel.displayedFolders
        } else {
            displayedFiles.append(contentsOf: viewModel.displayedFolders)
        }
        
        pageUpdated.insert(currentPage)
        currentPage += 1
        
        DispatchQueue.main.async {
            self.tableView.reloadData()
        }
    }
}
