//
//  FolderShowViewController.swift
//  FolderOdessaDemo
//
//  Created by msm72 on 04.10.2017.
//  Copyright (c) 2017 RemoteJob. All rights reserved.
//
//  This file was generated by the Clean Swift Xcode Templates so
//  you can apply clean architecture to your iOS and Mac projects,
//  see http://clean-swift.com
//

import Cocoa
import FilesProvider

// MARK: - Input & Output protocols
protocol FolderShowDisplayLogic: class {
    func folderPresentLoadContext(fromViewModel viewModel: FolderShowModels.Folder.ViewModel)
}

class FolderShowViewController: NSViewController {
    // MARK: - Properties
    var interactor: FolderShowBusinessLogic?
    var router: (NSObjectProtocol & FolderShowRoutingLogic & FolderShowDataPassing)?
        
    var documentsProvider: LocalFileProvider! {
        didSet {
            documentsProvider.delegate = self
        }
    }
    
        
    // MARK: - Object lifecycle
    override init(nibName nibNameOrNil: NSNib.Name?, bundle nibBundleOrNil: Bundle?) {
        super.init(nibName: nibNameOrNil, bundle: nibBundleOrNil)
        
        setup()
    }
    
    required init?(coder aDecoder: NSCoder) {
        super.init(coder: aDecoder)

        setup()
    }
    
    
    // MARK: - Setup
    private func setup() {
        let viewController          =   self
        let interactor              =   FolderShowInteractor()
        let presenter               =   FolderShowPresenter()
        let router                  =   FolderShowRouter()
        
        viewController.interactor   =   interactor
        viewController.router       =   router
        interactor.presenter        =   presenter
        presenter.viewController    =   viewController
        router.viewController       =   viewController
        router.dataStore            =   interactor
    }
    
    
    // MARK: - Routing
    override func prepare(for segue: NSStoryboardSegue, sender: Any?) {
        if let scene = segue.identifier {
            let selector = NSSelectorFromString("routeTo\(scene)WithSegue:")
            
            if let router = router, router.responds(to: selector) {
                router.perform(selector, with: segue)
            }
        }
    }
    
    
    // MARK: - View lifecycle
    override func viewDidLoad() {
        super.viewDidLoad()
        
        documentsProvider = LocalFileProvider(baseURL: (router?.dataStore?.folderURL)!)

        // Get list of files in a directory
        documentsProvider.contentsOfDirectory(path: "/", completionHandler: { contents, error in
            for file in contents {
                print("Name: \(file.name)")
                print("Size: \(file.size)")
                print("Creation Date: \(String(describing: file.creationDate))")
                print("Modification Date: \(String(describing: file.modifiedDate))")
            }
        })
        
        // Register a new notification handler
        documentsProvider.registerNotifcation(path: "/") {
            self.folderLoadContext()
        }
    }
    
    override func viewDidAppear() {
        super.viewDidAppear()
        
        questionViewLoad()
    }
    
    
    // MARK: - Custom Functions
    func questionViewLoad() {
        let questionShowVC = NSStoryboard(name: NSStoryboard.Name(rawValue: "QuestionShow"), bundle: nil).instantiateController(withIdentifier: NSStoryboard.SceneIdentifier(rawValue: "QuestionShowVC")) as! QuestionShowViewController
        presentViewControllerAsModalWindow(questionShowVC)
        
        // Successfully find entered folder
        questionShowVC.handlerFindSuccessfullCompletion = { () in
            self.folderLoadContext()
        }
    }
    
    func folderLoadContext() {
        let requestModel = FolderShowModels.Folder.RequestModel()
        self.interactor?.folderLoadContext(withRequestModel: requestModel)
        print("folder path = \(String(describing: router?.dataStore!.folderURL.absoluteString))")
    }
}


// MARK: - FileProviderDelegate
extension FolderShowViewController: FileProviderDelegate {
    func fileproviderSucceed(_ fileProvider: FileProviderOperations, operation: FileOperationType) {
        switch operation {
        case .copy(source: let source, destination: let dest):
            print("\(source) copied to \(dest).")
        
        case .remove(path: let path):
            print("\(path) has been deleted.")
        
        default:
            print("\(operation.actionDescription) from \(operation.source) to \(String(describing: operation.destination)) succeed")
        }
    }
    
    func fileproviderFailed(_ fileProvider: FileProviderOperations, operation: FileOperationType, error: Error) {
        switch operation {
        case .copy(source: let source, destination: _):
            print("copy of \(source) failed.")
        
        case .remove:
            print("file can't be deleted.")
        
        default:
            print("\(operation.actionDescription) from \(operation.source) to \(String(describing: operation.destination)) failed")
        }
    }
    
    func fileproviderProgress(_ fileProvider: FileProviderOperations, operation: FileOperationType, progress: Float) {
        switch operation {
        case .copy(source: let source, destination: let dest):
            print("Copy\(source) to \(dest): \(progress * 100) completed.")
        
        default:
            break
        }
    }
}


// MARK: - FolderShowDisplayLogic
extension FolderShowViewController: FolderShowDisplayLogic {
    func folderPresentLoadContext(fromViewModel viewModel: FolderShowModels.Folder.ViewModel) {
    }
}
